name: Deploy to Amazon ECS

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: newput/node-terraform
  # ECS_SERVICE: node-terraform-dev-service
  # ECS_CLUSTER: newput-dev
  # ECS_TASK_DEFINITION: infra/templates/ecs.json
  # CONTAINER_NAME: node-terraform-dev-app # set this to the name of the container in the # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.9

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 14
          cache: 'npm'
      - run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          # docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy on DEV
    runs-on: ubuntu-latest
    environment: dev
    needs: build
    defaults:
      run:
        working-directory: infra/

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: git info check
        run: |
          echo "github.sha"
          echo ${{ github.sha }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.9

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=vars/dev_backend.tfvars -backend-config=region=$AWS_REGION -backend-config=access_key=${{ secrets.AWS_ACCESS_KEY_ID }} -backend-config=secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=vars/dev.tfvars -var=image_tag=${{ github.sha }} -var=access_key=${{ secrets.AWS_ACCESS_KEY_ID }} -var=secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }} -out tfplan

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve tfplan

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
      #     container-name: ${{ env.CONTAINER_NAME }}
      #     image: ${{ steps.build-image.outputs.image }}

      # - name: Deploy Amazon ECS task definition
      #   id: ecs-deploy
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true
